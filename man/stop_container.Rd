% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/container.R
\name{stop_container}
\alias{stop_container}
\title{Stop running Docker containers for a Shiny application}
\usage{
stop_container(
  app_dir = NULL,
  container_id = NULL,
  docker_compose = TRUE,
  quiet = FALSE,
  force = FALSE,
  ...
)
}
\arguments{
\item{app_dir}{Character. Path to the Shiny application directory with Docker configuration.
If provided, the function will attempt to find and stop containers based on the image name.}

\item{container_id}{Character. ID or name of the container to stop. If NULL,
the function will try to find containers based on app_dir.}

\item{docker_compose}{Logical. If TRUE, use docker-compose for stopping if available. Default: TRUE.}

\item{quiet}{Logical. If TRUE, suppress Docker command output. Default: FALSE.}

\item{force}{Logical. If TRUE and stopping all containers, skip confirmation prompt. Default: FALSE.}

\item{...}{Additional arguments passed to processx.}
}
\value{
Invisibly returns TRUE if successful, FALSE otherwise.
}
\description{
This function stops a running Docker container that was started with
\code{run_container()} or \code{export()}. It can stop containers by ID
or by finding containers associated with the specified application directory.
If neither app_dir nor container_id is provided, it will stop all running containers.
}
\examples{
\dontrun{
# First run a container
result <- export("path/to/my/shinyapp", run = TRUE)

# Stop by container ID
stop_container(container_id = result$container_id)

# Or stop by app directory
stop_container("path/to/my/shinyapp")

# Stop all running containers
stop_container()
}
}
