% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/export.R
\name{dockerize}
\alias{dockerize}
\title{Create Docker configuration for a Shiny application}
\usage{
dockerize(
  app_dir,
  output_dir = NULL,
  app_type = NULL,
  port = 3838,
  dependencies = TRUE,
  custom_dockerfile = NULL,
  env_vars = NULL,
  ...
)
}
\arguments{
\item{app_dir}{Character. Path to the Shiny application directory.}

\item{output_dir}{Character. Path where Docker configuration should be created.
If NULL, files will be created in app_dir.}

\item{app_type}{Character. Either "r" or "python". If NULL, it will be auto-detected.}

\item{port}{Integer. The port to expose for the Shiny application. Default: 3838.}

\item{dependencies}{Logical. Whether to automatically detect and include
dependencies. Default: TRUE.}

\item{custom_dockerfile}{Character. Path to a custom Dockerfile template to use.
If NULL, the package's built-in templates will be used.}

\item{env_vars}{Named character vector. Environment variables to include in
the Docker configuration.}

\item{...}{Additional arguments passed to internal functions.}
}
\value{
Invisibly returns the path to the created Docker configuration.
}
\description{
Create Docker configuration for a Shiny application
}
\examples{
\dontrun{
# Basic usage with an R Shiny app
dockerize("path/to/my/shinyapp")

# For a Python Shiny app
dockerize("path/to/my/python/shinyapp", app_type = "python")

# With custom port and environment variables
dockerize("path/to/my/shinyapp", port = 8080,
          env_vars = c(API_KEY = "your-secret-key"))
}
}
